/*
 * Copyright (C) 2021 The Zion Authors
 * This file is part of The Zion library.
 *
 * The Zion is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The Zion is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Zion.  If not, see <http://www.gnu.org/licenses/>.
 */

package sdk

import (
	"os"
	"testing"

	"github.com/ethereum/go-ethereum/common"
)

var (
	chainID uint64 = 2
	url            = "http://13.231.222.1:22000"
	cli     *Client
)

func TestMain(m *testing.M) {
	cli = NewSender(url, nil)
	cli.caller = common.HexToAddress("0x8B35064B158634458Fd53A861d68Eb84152E4106")
	Init()
	os.Exit(m.Run())
}

func TestGetBoundAsset(t *testing.T) {
	asset, err := cli.GetBindPLTAsset(chainID, "latest")
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("palette have bound asset %s, target chain id %d", asset.Hex(), chainID)
}

func TestGetBoundProxy(t *testing.T) {
	proxy, err := cli.GetBindPLTProxy(chainID, "latest")
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("palette have bound proxy %s, target chain id %d", proxy.Hex(), chainID)
}

func TestGetCCMP(t *testing.T) {
	ccmp, err := cli.GetPLTCCMP("latest")
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("palette have bound ccmp %s", ccmp.Hex())
}

func TestBalanceOf(t *testing.T) {
	//addr := common.HexToAddress("0xeb18b5ab17759f7e971081f68946e3083e776551")
	addr := common.HexToAddress("0x4fd23f4ee7fada142d48bf486af7b6bc65af31ea")
	balance, err := cli.BalanceOf(addr, "latest")
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("balance is %s", balance.String())
}

func TestStakeAmount(t *testing.T) {
	addr := common.HexToAddress("0xeb18b5ab17759f7e971081f68946e3083e776551")
	balance, err := cli.BalanceOf(addr, "latest")
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("balance is %s", balance.String())
}

func TestGetDelegateFactor(t *testing.T) {
	addr := common.HexToAddress("0xeb18b5ab17759f7e971081f68946e3083e776551")
	factor, err := cli.GetDelegateFactor(addr, "latest")
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%s delegate factor is %v", addr.Hex(), factor)
}

//func TestUnpackSyncGenesis(t *testing.T) {
//	input := "0x34a773eb000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000000000000000000004670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000453c810e2d58aeb9aabc22723666785fa200c1d9fea5a5006d9e506df0911d7e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008e305f000000001dac2b7c00000000fdb2037b226c6561646572223a343239343936373239352c227672665f76616c7565223a22484a675171706769355248566745716354626e6443456c384d516837446172364e4e646f6f79553051666f67555634764d50675851524171384d6f38373853426a2b38577262676c2b36714d7258686b667a72375751343d222c227672665f70726f6f66223a22785864422b5451454c4c6a59734965305378596474572f442f39542f746e5854624e436667354e62364650596370382f55706a524c572f536a5558643552576b75646632646f4c5267727052474b76305566385a69413d3d222c226c6173745f636f6e6669675f626c6f636b5f6e756d223a343239343936373239352c226e65775f636861696e5f636f6e666967223a7b2276657273696f6e223a312c2276696577223a312c226e223a342c2263223a312c22626c6f636b5f6d73675f64656c6179223a31303030303030303030302c22686173685f6d73675f64656c6179223a31303030303030303030302c22706565725f68616e647368616b655f74696d656f7574223a31303030303030303030302c227065657273223a5b7b22696e646578223a312c226964223a2231323035303330396336343735636530373537376162373261316639366332363365353033306362353361383433623030636131323338613039336439646362313833653266227d2c7b22696e646578223a322c226964223a2231323035303332626564353565386334643963626335303635376666353930396565353164633339346139326161643931316333366261636538336334643633353430373934227d2c7b22696e646578223a332c226964223a2231323035303265363861366535346264666130616634376264313834363566343335326635313531646337323963363161373339393930396631636431633664383136633032227d2c7b22696e646578223a342c226964223a2231323035303232396530643163356232616538333839333061653161643836316464643364303734356431633766313432343932636162643032623239316432633935633164227d5d2c22706f735f7461626c65223a5b342c312c332c312c322c322c312c342c332c312c312c332c332c312c312c342c342c312c332c312c342c322c342c322c332c342c332c342c332c332c312c322c322c332c312c342c312c312c312c322c342c332c332c322c342c322c332c312c322c342c332c322c322c332c342c322c342c322c322c345d2c226d61785f626c6f636b5f6368616e67655f76696577223a36303030307d7d40e80b1c8c5ab0510c27506970c82e462cb11514000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010c12050409c6475ce07577ab72a1f96c263e5030cb53a843b00ca1238a093d9dcb183e2fec837e621b7ec6db7658c9b9808da304aed599043de1b433d490ff74f577c53d12050429e0d1c5b2ae838930ae1ad861ddd3d0745d1c7f142492cabd02b291d2c95c1dda6633dc7be5dd4f9597f32f1e45721959d0902a8e56a58b2db79ada7c3ce9321205042bed55e8c4d9cbc50657ff5909ee51dc394a92aad911c36bace83c4d63540794bc68a65f1a54ec4f14a630043090bc29ee9cddf90f3ecb86e0973ffff3fd4899120504e68a6e54bdfa0af47bd18465f4352f5151dc729c61a7399909f1cd1c6d816c0241800e782bb05f6f803b9f958930ebcee0b67d3af27845b4fbfa09e926cf17ae0000000000000000000000000000000000000000"
//	enc, err := hexutil.Decode(input)
//
//}
